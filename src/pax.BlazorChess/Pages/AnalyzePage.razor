@page "/analyzes"
@using pax.BlazorChess.Services
@using pax.chess
@using pax.uciChessEngine
@inject DbService dbService
@inject EngineService engineService
@implements IDisposable

<PageTitle>Analyze</PageTitle>

<div class="btn-group">
    <button type="button" class="btn btn-outline-light" @onclick="e => loadModal?.Show()">Import</button>
    @if (Analyzes == null)
    {
        <button type="button" class="btn btn-outline-info" @onclick="CreateNewAnalyzes">Start analyzing</button>
    }
</div>

<div class="d-flex">
    <div>
        <div class="btn-group mt-1">
            <span class="oi oi-action-undo text-warning pointer ms-1" @onclick="e => Game.Revert()"></span>
            <span class="oi oi-arrow-thick-left pointer ms-3" @onclick="e => Game.ObserverMoveBackward()"></span>
            <span class="oi oi-arrow-thick-right pointer ms-2" @onclick="e => Game.ObserverMoveForward()"></span>
        </div>
        <BoardContainer @ref="mainBoard" Game="Game" OnObserverMoveChanged="ObserverMoveChanged"></BoardContainer>
    </div>
    <div>
        @if (Analyzes != null)
        {
            <div class="d-flex justify-content-center align-items-start">
                <div>
                    <button type="button" class="btn btn-sm btn-primary" @onclick="e => enginesModal?.Show()">Add Engine</button>
                </div>
                @foreach (var engine in Analyzes.Engines)
                {
                    <div>
                        <span class="badge bg-info">@engine.Name <span class="oi oi-x pointer text-danger" @onclick="e => Analyzes.RemoveEngine(engine)"></span></span>
                    </div>
                }
            </div>
        }
        <div>
            <CascadingValue Value="Game">
                <div class="row">
                    @foreach (var engineInfo in EngineInfos)
                    {
                        <CascadingValue Value="engineInfo">
                            <EvalComponent OnPvInfoSelected="PvInfoSelected"></EvalComponent>
                        </CascadingValue>
                    }
                </div>
            </CascadingValue>
        </div>
        <div>
            <div class="row">
                @foreach (var pvGame in PvGames)
                {
                    <div>
                        <div class="btn-group mt-2">
                            <span class="oi oi-x text-danger pointer" @onclick="e => PvGames.Remove(pvGame)"></span>
                            <span class="badge bg-info">@pvGame.Name</span>
                            <span class="oi oi-arrow-thick-left pointer ms-3" @onclick="e => pvGame.ObserverMoveBackward()"></span>
                            <span class="oi oi-arrow-thick-right pointer ms-2" @onclick="e => pvGame.ObserverMoveForward()"></span>
                        </div>
                        <BoardContainer Game="pvGame" ShowBoard="false"></BoardContainer>
                    </div>
                }
            </div>
        </div>
    </div>
</div>
<LoadModal @ref="loadModal" Loaded="GameImport"></LoadModal>
<EnginesModal @ref="enginesModal" EngineSelected="LoadEngine"></EnginesModal>
@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public int? GameId { get; set; }

    Game Game = new Game();
    Analyzes? Analyzes;

    CancellationTokenSource tokenSource = new CancellationTokenSource();
    List<EngineInfo> EngineInfos = new List<EngineInfo>();

    List<Game> PvGames = new List<Game>();

    BoardContainer? mainBoard;
    LoadModal? loadModal;
    EnginesModal? enginesModal;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (GameId != null)
        {
            var game = await dbService.GetGameFromIdAsync((int)GameId);
            if (game != null)
            {
                Game = game;
                Analyzes = new Analyzes(game, tokenSource.Token);
            }
        } else
        {
            Analyzes = engineService.Analyzes.FirstOrDefault();
        }
        if (Analyzes != null)
        {
            Analyzes.EngineInfoAvailable += InfoAvailable;
        }
    }

    private void CreateNewAnalyzes()
    {
        if (Analyzes != null)
        {
            Analyzes.EngineInfoAvailable += InfoAvailable;
        }
        Analyzes = new Analyzes(Game, tokenSource.Token);
        Analyzes.EngineInfoAvailable += InfoAvailable;
    }

    private void InfoAvailable(object? sender, List<EngineInfo> infos)
    {
        EngineInfos = infos;
        InvokeAsync(() => StateHasChanged());
    }

    private void LoadEngine(string engineName)
    {
        Analyzes?.AddEngine(new Engine(engineName, engineService.AvailableEngines[engineName]));
    }

    private async Task SetEngineOption(Engine engine, string name, object value)
    {
        engine.SetOption(name, value);
        await engine.IsReady();
    }

    private async void ObserverMoveChanged()
    {
        if (Analyzes != null)
        {
            await Analyzes.UpdateEngineGame();
        }
    }

    void PvInfoSelected(KeyValuePair<string, PvInfo> info)
    {
        Game game = DbMap.GetGame(String.Concat(String.Concat(Game.State.Moves.Select(s => s.EngineMove.ToString())), String.Concat(info.Value.Moves.Select(s => s.ToString()))));
        game.ObserverMoveTo(game.State.Moves.Count);
        game.Name = $"{info.Key} PV{info.Value.MultiPv}";
        PvGames.Add(game);
    }

    async void GameImport(Game game)
    {
        Game = new Game(game);
        await InvokeAsync(() => StateHasChanged());
    }

    public void Dispose()
    {
        if (Analyzes != null)
        {
            Analyzes.EngineInfoAvailable -= InfoAvailable;
            Analyzes.Pause();
        }
    }
}

