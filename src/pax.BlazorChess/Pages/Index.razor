@page "/"
@using pax.chess
@using pax.uciChessEngine

<PageTitle>Index</PageTitle>

<button type="button" class="btn btn-primary" @onclick="Test">Test</button>
<div class="d-flex">
    <div>
        <div class="btn-group mt-1">
            <span class="oi oi-action-undo text-warning pointer ms-1" @onclick="e => Game.Revert()"></span>
            <span class="oi oi-arrow-thick-left pointer ms-3" @onclick="e => Game.ObserverMoveBackward()"></span>
            <span class="oi oi-arrow-thick-right pointer ms-2" @onclick="e => Game.ObserverMoveForward()"></span>
        </div>
        <BoardContainer Game="Game"></BoardContainer>
    </div>
    <div>
        <p>
            @Pgn.MapPieces(Game.State)
        </p>
    </div>
</div>

@code {
    // Game Game = new Game();
    Game Game = DbMap.GetGame("d2d4g8f6c1f4d7d5e2e3c7c5g1f3b8c6c2c3f6h5d4c5h5f4e3f4e7e6b2b4d8f6d1d2h7h6a2a3g7g5f4g5h6g5d2g5f6g5f3g5a7a5b4b5c6e5f1e2f8c5a3a4c8d7g5f3e5f3e2f3a8c8g2g3e8e7e1f1f7f5f1g2d7e8a1a2b7b6f3d1e6e5d1b3e8f7h2h4e5e4h1d1c8d8b1d2d8g8a2a1f5f4d2f1h8h4b3d5f7h5d1d3e4d3d5g8f4f3g2g1h4e4g8h7e4e2h7d3c5f2g1h1h5f7h1h2f7e6g3g4e6g4f1g3e2e6g3f5e7f6a1a2f2e1f5d4e6e8a2c2f6g5h2g1g5f4d3g6e8e3c2f2e1f2g1f2e3c3d4c2c3b3g6h7b3b2h7d3g4h3d3h7h3e6f2f1e6b3c2e1b2d2h7g6b3c4g6d3c4d3e1d3d2d3f1f2d3d2f2f1f4g3f1e1d2d4e1f1d4d1");

    async void Test()
    {
        for (int i = 0; i < 10; i++)
        {
            Engine engine = new Engine("Stockfish", @"C:\data\stockfish_14.1_win_x64_avx2\stockfish_14.1_win_x64_avx2.exe");
            Engine engine2 = new Engine("Stockfish", @"C:\data\stockfish_14.1_win_x64_avx2\stockfish_14.1_win_x64_avx2.exe");

            engine.Start();
            engine2.Start();

            await engine.IsReady();
            await engine2.IsReady();

            var options = await engine.GetOptions();
            var options2 = await engine2.GetOptions();

            engine.Send("ucinewgame");
            engine2.Send("ucinewgame");

            await engine.IsReady();
            await engine2.IsReady();

            engine.Send("go");
            engine2.Send("go");

            await Task.Delay(1000);

            engine.Send("stop");
            engine2.Send("stop");

            await engine.IsReady();
            await engine2.IsReady();

            var info = engine.GetInfo();
            var info2 = engine2.GetInfo();

            Console.WriteLine($"best1: {info.BestMove}");
            Console.WriteLine($"best2: {info.BestMove}");

            engine.Dispose();
            engine2.Dispose();
        }
    }
}

