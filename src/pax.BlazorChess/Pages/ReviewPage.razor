@page "/review"
@using pax.BlazorChess.Models
@using pax.BlazorChess.Services
@using pax.chess
@using pax.uciChessEngine
@using System.Text.Json
@inject EngineService engineService
@inject DbService dbService
@inject NavigationManager _nav
@inject ILogger<ReviewPage> logger
@implements IDisposable

<div class="btn-group">
    <button type="button" class="btn btn-outline-light" @onclick="e => loadModal?.Show()">Import</button>
    @if (!Analyzing)
    {
        <button type="button" class="btn btn-outline-warning" @onclick="@( async() => _ = Analyse())">Analyze</button>
        <button type="button" class="btn btn-success ms-2" @onclick="Save">Save</button>
    }
    else
    {
        <div class="spinner-border mx-2" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <button type="button" class="btn btn-danger ms-2" @onclick="Stop">Stop</button>
    }
    <button type="button" class="btn btn-info ms-2" @onclick="StartEngineVsEngineGame">Engine vs Engine</button>
    <span class="oi oi-cog pointer ms-5" @onclick="e => settingModal?.Show(reviewSettings)"></span>
</div>
<div class="d-flex">
    @if (Analysis != null)
    {
        <div>
            <div>
                @if (CurrentInfo != null)
                {
                    <div class="d-flex justify-content-start mt-3">
                        @if (NextInfo != null)
                        {
                            <div class="border rounded p-1">
                                <h4><span class="badge bg-secondary">Game: @CurrentInfo.GameMove.PgnMove</span></h4>
                                <h4><span class="badge bg-info">Game Eval @NextInfo.BestMove.Evaluation</span></h4>
                            </div>
                        }
                        <div class="border rounded p-1">
                            <h4><span class="badge bg-primary">Bestmove: @CurrentInfo.BestMove.PgnMove</span></h4>
                            <h4><span class="badge bg-info">Eval @CurrentInfo.BestMove.Evaluation</span></h4>
                            <button type="button" class="btn btn-sm btn-outline-light" @onclick="ShowBestLine">Show Line</button>
                        </div>
                        @if (CurrentInfo.RunnerMoves.Any())
                        {
                            <div class="border rounded p-1">
                                <h4><span class="badge bg-secondary">2nd Best: @CurrentInfo.RunnerMoves[0].PgnMove</span></h4>
                                <h4><span class="badge bg-info">Runner Eval @CurrentInfo.RunnerMoves[0].Evaluation</span></h4>
                                <button type="button" class="btn btn-sm btn-outline-light" @onclick="e => Show2ndBestLine(0)">Show Line</button>
                            </div>
                        }
                    </div>
                }
            </div>
            <BoardContainer @ref="boardContainer" Game="Analysis.Game" ShowBoard="false" OnObserverMoveChanged="ObserverMoveChanged" OnMoveRequested="MoveRequested"></BoardContainer>

        </div>
    }
    else
    {

    }
    <div class="ms-4"  style="width: 40vw;">
        @if (Analysis != null)
        {
        <div>
            <EngineComponent @ref="engineComponent" Game="Analysis.Game" mainBoard="boardContainer"></EngineComponent>
        </div>
        }
        <div>
            <ChartComponent @ref="chart" Chart="_chart" OnChartClicked="ChartClicked"></ChartComponent>
        </div>
    </div>
</div>
<LoadModal @ref="loadModal" Loaded="GameImport"></LoadModal>
<SettingsModal @ref="settingModal" Setting="SettingsModal.PageSetting.Review" OnSettingsChoosen="SettingsChoosen"></SettingsModal>

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public int? GameId { get; set; } = 22;

    List<GameAnalyzes> GameAnalyzis = new List<GameAnalyzes>();
    GameAnalyzes? Analysis;
    BoardContainer? boardContainer;
    ChartComponent? chart;
    LoadModal? loadModal;
    SettingsModal? settingModal;
    EngineComponent? engineComponent;

    CancellationTokenSource cts = new CancellationTokenSource();

    List<Rating> Infos = new List<Rating>();
    private Rating? CurrentInfo;
    private Rating? NextInfo;

    private Chart _chart = ChartService.GetRatingChart();
    private bool Analyzing = false;

    private ReviewSettings reviewSettings = new ReviewSettings();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        reviewSettings.EngineString = engineService.AvailableEngines.First().Key;
        _ = Init();
    }

    private async Task Init()
    {
        GameAnalyzis = engineService.GetGameAnalyses();
        if (GameId == null)
        {
            Analysis = GameAnalyzis.FirstOrDefault();
        }
        else
        {
            var game = await dbService.GetGameFromIdAsync((int)GameId);
            if (game != null)
            {
                Analysis = engineService.CreateGameAnalyzes(game, reviewSettings.EngineString);
            }
        }
        await InvokeAsync(() => StateHasChanged());
        if (Analysis != null)
        {
            _chart.data.labels = Analysis.Game.State.Moves.Select(s => s.HalfMoveNumber.ToString()).ToList();
        }
    }

    private async void GameImport(Game game)
    {
        GameId = null;
        Analysis = engineService.CreateGameAnalyzes(game, reviewSettings.EngineString);

        if (game.State.Moves.Any())
        {
            if (!game.Infos.ContainsKey("UTCDate"))
            {
                game.Infos["UTCDate"] = DateTime.UtcNow.ToString("yyyy.MM.dd");
                game.Infos["UTCTime"] = DateTime.UtcNow.ToString("HH:mm:ss");
            }
            var dbGame = await dbService.SaveGame(game, null);
            if (dbGame != null)
            {
                GameId = dbGame.Id;
                _nav.NavigateTo(_nav.GetUriWithQueryParameter("GameId", GameId));
            }
        }
    }

    private void SettingsChoosen()
    {
        if (Analysis != null)
        {
            engineService.DeleteGameAnalyzes(Analysis);
            Analysis = engineService.CreateGameAnalyzes(Analysis.Game, reviewSettings.EngineString);
        }
    }

    private void ChartClicked(string label)
    {
        if (Analysis != null)
        {
            int i;
            if (int.TryParse(label, out i))
            {
                Analysis.Game.ObserverMoveTo(i);
                ObserverMoveChanged();
                boardContainer?.Focus();
            }
        }
    }

    private void UpdateChart()
    {
        _chart.data.datasets[0].data = Infos.OrderByDescending(o => o.BestMove.HalfMoveNumber).Select(s => s.BestMove.Evaluation != null ? s.BestMove.Evaluation.ChartScore() : 0).ToList();
        chart?.UpdateDataset(_chart.data.datasets[0]);
    }

    private void ObserverMoveChanged()
    {
        _ = engineComponent?.Update();
        if (Analysis != null && Analysis.Game.ObserverState.CurrentMove != null && Analysis.Game.ObserverState.CurrentMove.Variation == null)
        {
            CurrentInfo = Infos.FirstOrDefault(f => f.BestMove.HalfMoveNumber == Analysis.Game.ObserverState.CurrentMove.HalfMoveNumber);
            NextInfo = Infos.FirstOrDefault(f => f.BestMove.HalfMoveNumber == Analysis.Game.ObserverState.CurrentMove.HalfMoveNumber + 1);
            if (CurrentInfo != null)
            {
                var move = CurrentInfo.BestMove;
                var runnermove = CurrentInfo.RunnerMoves.FirstOrDefault();
                if (move != null && runnermove != null)
                {
                    boardContainer?.DrawHints(new List<EngineMove>() { move.EngineMove, runnermove.EngineMove }, true);
                }
                InvokeAsync(() => StateHasChanged());
            }
            chart?.DrawHorizontalLine(Analysis.Game.ObserverState.CurrentMove.HalfMoveNumber);
        } else if (Analysis != null && Analysis.Game.ObserverState.CurrentMove != null)
        {
            boardContainer?.DrawHints(new List<EngineMove>(), true);
        }
    }

    private async Task Analyse()
    {
        int i = 0;
        if (Analysis != null)
        {
            _chart.data.labels = Analysis.Game.State.Moves.Select(s => s.HalfMoveNumber.ToString()).ToList();
            chart?.UpdateLabels(_chart.data.labels);
            Analyzing = true;
            await InvokeAsync(() => StateHasChanged());
            Infos.Clear();
            cts = new CancellationTokenSource();
            try
            {
                await foreach (var info in Analysis.Analyze(cts.Token, TimeSpan.FromMilliseconds(reviewSettings.MsPerMove), 2, reviewSettings.Threads))
                {
                    i++;
                    Infos.Add(info);
                    if (i % 10 == 0)
                    {
                        List<string> labels = Analysis.Game.State.Moves.Select(s => s.HalfMoveNumber.ToString()).ToList();
                        List<double> data = Enumerable.Repeat(0.0, Analysis.Game.State.Moves.Count).ToList();
                        for (int j = 0; j < Infos.Count; j++)
                        {
                            var bestmove = Infos[j].BestMove;
                            data[bestmove.HalfMoveNumber] = bestmove.Evaluation != null ? bestmove.Evaluation.ChartScore() : 0;
                        }
                        _chart.data.datasets[0].data = data;
                        chart?.UpdateDataset(_chart.data.datasets[0]);
                        await InvokeAsync(() => StateHasChanged());
                    }
                }
            }
            catch (OperationCanceledException) { }
            finally
            {
                _chart.data.datasets[0].data = Infos.OrderBy(o => o.BestMove.HalfMoveNumber).Select(s => s.BestMove.Evaluation != null ? s.BestMove.Evaluation.ChartScore() : 0).ToList();
                chart?.UpdateDataset(_chart.data.datasets[0]);
                Analyzing = false;
                await InvokeAsync(() => StateHasChanged());
            }
        }
    }

    private void ShowBestLine()
    {
        if (CurrentInfo != null && Analysis != null)
        {
            int startMoveId = Analysis.Game.ObserverState.CurrentMove == null ? 0 : Analysis.Game.ObserverState.CurrentMove.HalfMoveNumber;
            Analysis.Game.CreateVariation(startMoveId, CurrentInfo.BestLine, CurrentInfo.BestMove.Evaluation);
        }
    }

    private async void Save()
    {
        if (Analysis != null)
        {
            await dbService.SaveGame(Analysis.Game, GameId);
        }
    }

    private void Show2ndBestLine(int i)
    {
        if (CurrentInfo != null && Analysis != null && CurrentInfo.RunnerLines.Count > i)
        {
            int startMoveId = Analysis.Game.ObserverState.CurrentMove == null ? 0 : Analysis.Game.ObserverState.CurrentMove.HalfMoveNumber;
            Analysis.Game.CreateVariation(startMoveId, CurrentInfo.RunnerLines[i], CurrentInfo.BestMove.Evaluation);
        }
    }

    private async Task MoveRequested()
    {
        if (engineComponent != null)
        {
            var move = await engineComponent.ExecuteBestMove();
            if (move != null)
            {
                boardContainer?.DrawHints(new List<EngineMove>(), true);
                boardContainer?.DrawOtherHints(new List<EngineMove>(), true);
                await InvokeAsync(() => StateHasChanged());
            }
        }
    }

    private void StartEngineVsEngineGame()
    {
        if (Analysis != null)
        {
            Game eveGame = new Game();
            for (int i = 0; i < Analysis.Game.ObserverState.Moves.Count; i++)
            {
                eveGame.Move(Analysis.Game.ObserverState.Moves[i].EngineMove);
            }
            engineService.CreateEngineGame(eveGame, "Test1");
            _nav.NavigateTo("enginevsengine");
        }
    }

    private void Stop()
    {
        cts.Cancel();
    }

    public void Dispose()
    {
        cts.Cancel();
    }
}
