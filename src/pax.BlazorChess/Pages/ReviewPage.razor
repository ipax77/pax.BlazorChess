@page "/review"
@using pax.BlazorChess.Models
@using pax.BlazorChess.Services
@using pax.chess
@using pax.uciChessEngine
@using System.Text.Json
@inject EngineService engineService
@inject DbService dbService
@inject ILogger<ReviewPage> logger

<div class="btn-group">
    <button type="button" class="btn btn-primary" @onclick="@( async() => _ = Analyse())">Analyse</button>
    <button type="button" class="btn btn-danger" @onclick="Stop">Stop</button>

</div>
<div class="d-flex">
    @if (Analysis != null)
    {
        <div>
            <div>
                @if (CurrentInfo != null)
                {
                    <div class="d-flex justify-content-start mt-3">
                        @if (NextInfo != null)
                        {
                            <div class="border rounded p-1">
                                <h4><span class="badge bg-secondary">Game: @CurrentInfo.GameMove.PgnMove</span></h4>
                                <h4><span class="badge bg-info">Game Eval @NextInfo.BestMove.Evaluation</span></h4>
                            </div>
                        }
                        <div class="border rounded p-1">
                            <h4><span class="badge bg-primary">Bestmove: @CurrentInfo.BestMove.PgnMove</span></h4>
                            <h4><span class="badge bg-info">Eval @CurrentInfo.BestMove.Evaluation</span></h4>
                        </div>
                        @if (CurrentInfo.RunnerMoves.Any())
                        {
                            <div class="border rounded p-1">
                                <h4><span class="badge bg-secondary">2nd Best: @CurrentInfo.RunnerMoves[0].PgnMove</span></h4>
                                <h4><span class="badge bg-info">Runner Eval @CurrentInfo.RunnerMoves[0].Evaluation</span></h4>
                            </div>
                        }
                    </div>
                }
            </div>
            <BoardContainer @ref="boardContainer" Game="Analysis.Game" ShowBoard="false" OnObserverMoveChanged="ObserverMoveChanged"></BoardContainer>

        </div>
    }
    else
    {
        <div>
            <p>
                Loading ...
            </p>
        </div>
    }
    <div class="ms-4">
        <div class="btn-group">
            <button type="button" class="btn btn-primary" @onclick="e => chart?.DrawChart(_chart)">Redraw</button>
            <button type="button" class="btn btn-primary" @onclick="UpdateChart">Update</button>
        </div>
        <div style="width: 40vw;">
            <ChartComponent @ref="chart" Chart="_chart" OnChartClicked="ChartClicked"></ChartComponent>
        </div>
        @*        <table class="table table-striped">
            <thead>
            <tr>
            <th>#</th>
            <th>BestMove</th>
            <th>Eval</th>
            <th>Ponder</th>
            <th>PonderEval</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var info in Infos.OrderBy(o => o.HalfMoveNumber))
            {
            <tr>
            <td>@info.HalfMoveNumber</td>
            <td>@info.BestMove</td>
            <td>@info.Eval</td>
            <td>@info.RunnerMove</td>
            <td>@info.RunnerEval</td>
            </tr>
            }
            </tbody>
            </table>*@
    </div>
</div>

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public int? GameId { get; set; } = 22;

    List<GameAnalyzes> GameAnalyzis = new List<GameAnalyzes>();
    GameAnalyzes? Analysis;
    BoardContainer? boardContainer;
    ChartComponent? chart;
    CancellationTokenSource cts = new CancellationTokenSource();

    List<Rating> Infos = new List<Rating>();
    private int ObserverMove;
    private Rating? CurrentInfo;
    private Rating? NextInfo;

    private Chart _chart = ChartService.GetRatingChart();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _ = Init();
    }

    private async Task Init()
    {
        GameAnalyzis = engineService.GetGameAnalyses();
        if (GameId == null)
        {
            Analysis = GameAnalyzis.FirstOrDefault();   
        }
        else
        {
            var game = await dbService.GetGameFromIdAsync((int)GameId);
            if (game != null)
            {
                Analysis = engineService.CreateGameAnalyzes(game, "Stockfish");
            }
        }
        await InvokeAsync(() => StateHasChanged());
        if (Analysis != null)
        {
            _chart.data.labels = Analysis.Game.State.Moves.Select(s => s.HalfMoveNumber.ToString()).ToList();
        }
    }

    private void ChartClicked(string label)
    {
        if (Analysis != null)
        {
            int i;
            if (int.TryParse(label, out i))
            {
                Analysis.Game.ObserverMoveTo(i);
                ObserverMoveChanged(i);
                boardContainer?.Focus();
            }
        }
    }

    private void UpdateChart()
    {
        _chart.data.datasets[0].data = Infos.OrderByDescending(o => o.BestMove.HalfMoveNumber).Select(s => s.BestMove.Evaluation != null ? s.BestMove.Evaluation.ChartScore() : 0).ToList();
        chart?.UpdateDataset(_chart.data.datasets[0]);
    }

    private void ObserverMoveChanged(int? i)
    {
        if (i != null)
        {
            ObserverMove = (int)i;
            CurrentInfo = Infos.FirstOrDefault(f => f.BestMove.HalfMoveNumber == ObserverMove - 1);
            NextInfo = Infos.FirstOrDefault(f => f.BestMove.HalfMoveNumber == ObserverMove);
            if (CurrentInfo != null)
            {
                var move = CurrentInfo.BestMove;
                var runnermove = CurrentInfo.RunnerMoves.FirstOrDefault();
                if (move != null && runnermove != null)
                {
                    boardContainer?.DrawHints(new List<EngineMove>() { move.EngineMove, runnermove.EngineMove }, true);
                }
                InvokeAsync(() => StateHasChanged());
            }
            chart?.DrawHorizontalLine((int)i);
        }
    }

    private async Task Analyse()
    {
        int i = 0;
        if (Analysis != null)
        {
            Infos.Clear();
            await foreach (var info in Analysis.Analyze(cts.Token))
            {
                i++;
                Infos.Add(info);
                if (i % 10 == 0)
                {
                    List<string> labels = Analysis.Game.State.Moves.Select(s => s.HalfMoveNumber.ToString()).ToList();
                    List<double> data = Enumerable.Repeat(0.0, Analysis.Game.State.Moves.Count).ToList();
                    for (int j = 0; j < Infos.Count; j++)
                    {
                        var bestmove = Infos[j].BestMove;
                        data[bestmove.HalfMoveNumber] = bestmove.Evaluation != null ? bestmove.Evaluation.ChartScore() : 0;
                    }
                    _chart.data.datasets[0].data = data;
                    chart?.UpdateDataset(_chart.data.datasets[0]);
                    await InvokeAsync(() => StateHasChanged());
                }
            }
            _chart.data.datasets[0].data = Infos.OrderBy(o => o.BestMove.HalfMoveNumber).Select(s => s.BestMove.Evaluation != null ? s.BestMove.Evaluation.ChartScore() : 0).ToList();
            chart?.UpdateDataset(_chart.data.datasets[0]);
            await InvokeAsync(() => StateHasChanged());
        }
    }

    private void Stop()
    {
        cts.Cancel();
    }
}
