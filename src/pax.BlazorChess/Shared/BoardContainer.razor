@using pax.BlazorChess.Models
@using pax.BlazorChess.Services
@using pax.chess
@inject IJSRuntime _js

<div class="d-flex" tabindex="0" @ref="boardcontainer" @onkeydown="KeyDown" @onmousewheel="MouseWheel" style="outline: none !important; touch-action: none;">
    <CascadingValue Value="Game">
        @if (ShowInfo)
        {
            <div class="mx-2">
                <GameInfoComponent></GameInfoComponent>
            </div>
        }
        <div>
            @if (ShowBoard)
            {
                <div class="boardcontainer mt-1 mb-4" style="width: 40vh;">
                    <BoardComponent @ref="board" ObserverMode="false" OnMoveUpdate="BoardUpdate"></BoardComponent>
                </div>
            }
            @if (ShowObserverBoard)
            {
                <div class="boardcontainer mt-1" style="width: 40vh;">
                    <BoardComponent @ref="boardobs" ObserverMode="true" OnMoveUpdate="ObserverBoardUpdate"></BoardComponent>
                </div>
            }
        </div>
        <div>
            @if (ShowMoves)
            {
                <div class="mx-2">
                    <div style="height: 40vh;">
                        <MovesComponent @ref="movesComponent" GotoMove="GotoBoardMove"></MovesComponent>
                    </div>
                </div>
            }
        </div>
    </CascadingValue>
</div>

@code {
    [Parameter]
    [EditorRequired]
    public Game Game { get; set; } = new Game();

    [Parameter]
    public bool ShowBoard { get; set; } = true;

    [Parameter]
    public bool ShowObserverBoard { get; set; } = true;

    [Parameter]
    public bool ShowMoves { get; set; } = true;

    [Parameter]
    public bool ShowInfo { get; set; } = true;

    [Parameter]
    public EventCallback OnObserverMoveChanged { get; set; }

    [Parameter]
    public EventCallback OnMoveRequested { get; set; }

    ElementReference? boardcontainer;
    BoardComponent? board;
    BoardComponent? boardobs;
    MovesComponent? movesComponent;

    private Game? KeyBoardGame;

    List<BoardComponent?> Boards = new List<BoardComponent?>();

    double squareSize;
    private DotNetObjectReference<BoardContainer>? objRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var size = await _js.InvokeAsync<double[]>("getElementSize", "board");
            Boards.Add(board);
            Boards.Add(boardobs);
            ResizeEvent(size);
            objRef = DotNetObjectReference.Create(this);
            await _js.InvokeVoidAsync("resizeEvents", objRef, true);
            KeyBoardGame = Game;
        }
    }

    [JSInvokable]
    public void ResizeEvent(double[]? size)
    {
        if (size != null)
        {
            squareSize = size[2] / 8.0;
            Boards.ForEach(f => f?.Update(squareSize));
        }
    }

    public void DrawHints(List<EngineMove> hints, bool ObserverBoard)
    {
        var dboard = ObserverBoard ? boardobs : board;
        if (dboard != null)
        {
            dboard.DrawHints(hints);
        }
    }

    public void DrawOtherHints(List<EngineMove> hints, bool ObserverBoard)
    {
        var dboard = ObserverBoard ? boardobs : board;
        if (dboard != null)
        {
            dboard.DrawOtherHints(hints);
        }
    }

    public void DrawReviewHints(bool observerBoard = true)
    {
        var moves = GetReviewMoves();
        if (moves.Any())
        {
            DrawHints(moves, observerBoard);
        } else
        {
            DrawHints(new List<EngineMove>(), observerBoard);
        }
    }

    public List<EngineMove> GetReviewMoves()
    {
        List<EngineMove> moves = new List<EngineMove>();
        var reviewVariations = Game.GetCurrentReviewVariations().ToArray();
        for (int i = 0; i < reviewVariations.Length; i++)
        {
            moves.Add(reviewVariations[i].Moves.First().EngineMove);
        }
        return moves;
    }

    private void KeyDown(KeyboardEventArgs e)
    {
        if (e.Code == "ArrowRight")
        {
            KeyBoardGame?.ObserverMoveForward();
            OnObserverMoveChanged.InvokeAsync();
        }
        else if (e.Code == "ArrowLeft")
        {
            KeyBoardGame?.ObserverMoveBackward();
            OnObserverMoveChanged.InvokeAsync();
        }
        else if (e.Code == "Space")
        {
            OnMoveRequested.InvokeAsync();
        }
    }

    private void MouseWheel(WheelEventArgs e)
    {
        if (e.DeltaY > 0)
        {
            KeyBoardGame?.ObserverMoveForward();
            OnObserverMoveChanged.InvokeAsync();
        }
        else if (e.DeltaY < 0)
        {
            KeyBoardGame?.ObserverMoveBackward();
            OnObserverMoveChanged.InvokeAsync();
        }
    }

    private void BoardUpdate()
    {
        StateHasChanged();
        KeyBoardGame = Game;
    }

    private void ObserverBoardUpdate()
    {
        StateHasChanged();
        KeyBoardGame = Game;
        OnObserverMoveChanged.InvokeAsync();
    }

    private void GotoBoardMove(Move move)
    {
        Game.ObserverMoveTo(move);
        KeyBoardGame = Game;
        OnObserverMoveChanged.InvokeAsync();
    }

    public void Focus()
    {
        KeyBoardGame = Game;
        _js.InvokeVoidAsync("SetFocusToElement", boardcontainer);
    }
}
