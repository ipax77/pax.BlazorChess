@using pax.chess
@using pax.uciChessEngine

@if (EngineInfo != null && Game != null)
{
    <div class="card" style="width: 30vw;">
        <div class="card-header">
            <span class="oi oi-x text-danger pointer me-3" @onclick="e => OnCloseRequested.InvokeAsync(EngineInfo.EngineName)"></span>
            <span>@EngineInfo.EngineName</span>
            <span class="float-end">
            <span class="oi oi-plus pointer" @onclick="e => OnPvLinesChange.InvokeAsync(new KeyValuePair<string, bool>(EngineInfo.EngineName, true))"></span>
            <span class="oi oi-minus pointer ms-1" @onclick="e => OnPvLinesChange.InvokeAsync(new KeyValuePair<string, bool>(EngineInfo.EngineName, false))"></span>
            </span>
        </div>
        <div class="card-body">
            <table class="table table-sm table-striped">
                <thead></thead>
                <tbody>
                    @foreach (var pvInfo in EngineInfo.PvInfos)
                    {
                        Evaluation eval = new Evaluation(pvInfo.Score, pvInfo.Mate, Game.ObserverState.Info.BlackToMove);
                        <tr>
                            <td class="col"><span class="oi oi-external-link text-light pointer" @onclick="e => OnPvInfoSelected.InvokeAsync(new KeyValuePair<string, PvInfo>(EngineInfo.EngineName, pvInfo))"></span></td>
                            <td class="col"><span class="badge @(eval.Score < 0 ? "bg-warning" : "bg-success")">@eval.ToString()</span></td>
                            <td class="col"><span class="badge bg-light">Depth @pvInfo.Depth</span></td>
                            <td class="col"><span class="badge bg-info">@pvInfo.Moves.ElementAt(0).ToString()</span></td>
                            <td>
                                <span class="d-inline-block text-truncate" style="max-width: 300px;">
                                    @String.Join(" ", pvInfo.Moves.Select(s => s.ToString()))
                                </span>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

    </div>
}

@code {
    [CascadingParameter]
    public EngineInfo? EngineInfo { get; set; }

    [CascadingParameter]
    public Game? Game { get; set; }

    [Parameter]
    public EventCallback<KeyValuePair<string, PvInfo>> OnPvInfoSelected { get; set; }

    [Parameter]
    public EventCallback<string> OnCloseRequested { get; set; }

    [Parameter]
    public EventCallback<KeyValuePair<string, bool>> OnPvLinesChange { get; set; }


}
