@using System.Text
@using BlazorContextMenu
@using pax.chess
@inject IJSRuntime _js
@implements IDisposable

<style>
    .my-menu {
        color: darkblue;
    }

        /* using css specificity to override default background-color */
        .my-menu .my-menu-item {
            background-color: #ffb3b3;
        }

            .my-menu .my-menu-item:hover {
                background-color: #c11515;
            }
</style>

<ContextMenu Id="variationMenu" Template="myTemplate">
    <Item Id="variation-delete" OnClick="@DeleteVariation">Delete</Item>
    @*    <Item OnClick="@OnClick">Item 2</Item>
        <Item OnClick="@OnClick" Enabled="false">Item 3 (disabled)</Item>
        <Seperator />
        <Item>
        Submenu
        <SubMenu>
        <Item OnClick="@OnClick">Submenu Item 1</Item>
        <Item OnClick="@OnClick">Submenu Item 2</Item>
        </SubMenu>
        </Item>*@
</ContextMenu>

<div style="height: 100%; overflow-y: auto; overflow-x: hidden;">
    @if (Game != null)
    {
        <table class="table table-dark table-striped">
            <thead>
                <tr>
                    <th>#</th>
                    @if (Game.State.Info.BlackToMove)
                    {
                        <th><span class="badge bg-light text-black-50">&emsp;white</span></th>
                        <th><span class="badge bg-dark text-while-50"><span class="oi oi-play-circle" style="font-size: 10px;"></span> black</span></th>
                    }
                    else
                    {
                        <th><span class="badge bg-light text-black-50"><span class="oi oi-play-circle" style="font-size: 10px;"></span> white</span></th>
                        <th><span class="badge bg-dark text-while-50">&emsp;black</span></th>
                    }
                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < Game.State.Moves.Count; i += 2)
                {
                    int I = i;
                    Move whitemove = Game.State.Moves[I];
                    Move? blackmove = Game.State.Moves.Count > I + 1 ? Game.State.Moves[I + 1] : null;
                    bool whiteIsCurrent = Game.ObserverState.IsCurrentMove(whitemove);
                    bool blackIsCurrent = Game.ObserverState.IsCurrentMove(blackmove);
                    @if (Game.Variations.ContainsKey(whitemove))
                    {
                        <tr>
                            <td>@(((int)I/2) + 1)</td>
                            <td id="@MoveId(whitemove)" class="pointer @(whiteIsCurrent ? "table-info rounded" : "")" @onclick="e => GotoMove.InvokeAsync(whitemove)">@whitemove.PgnMove</td>
                        </tr>
                        <MovesVariationComponent Variations="Game.Variations[whitemove]" Game="Game" GotoMove="GotoMove"></MovesVariationComponent>
                        @if (blackmove != null)
                        {
                            <tr>
                                <td>@(((int)I/2) + 1)</td>
                                <td>...</td>
                                <td id="@MoveId(blackmove)" class="pointer @(blackIsCurrent ? "table-info" : "")" @onclick="e => GotoMove.InvokeAsync(blackmove)">
                                    @blackmove.PgnMove
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td>@(((int)I/2) + 1)</td>
                            <td id="@MoveId(whitemove)" class="pointer @(whiteIsCurrent ? "table-info rounded" : "")" @onclick="e => GotoMove.InvokeAsync(whitemove)">@whitemove.PgnMove</td>
                            @if (blackmove != null)
                            {
                                <td id="@MoveId(whitemove)" class="pointer @(blackIsCurrent ? "table-info" : "")" @onclick="e => GotoMove.InvokeAsync(blackmove)">
                                    @blackmove.PgnMove
                                </td>
                            }

                        </tr>
                    }
                    @if (blackmove != null && Game.Variations.ContainsKey(blackmove))
                    {
                        <MovesVariationComponent Variations="Game.Variations[blackmove]" Game="Game" GotoMove="GotoMove"></MovesVariationComponent>
                    }
                }
            </tbody>
        </table>
    }
</div>

@code
{
    [CascadingParameter]
    [EditorRequired]
    public Game Game { get; set; } = new Game();

    [Parameter]
    public EventCallback<Move> GotoMove { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Game.ObserverMoved += Update;
    }

    public string MoveId(Move? move)
    {
        if (move == null)
        {
            return "0";
        }
        else
        {
            StringBuilder sb = new StringBuilder();
            sb.Append(move.Variation == null ? "0|0" : $"{move.Variation.StartMove}|{move.Variation.RootStartMove}");
            sb.Append("|");
            sb.Append(move.HalfMoveNumber);
            sb.Append("|");
            sb.Append(Game.GameGuid.ToString().Substring(0, 5));
            return sb.ToString();
        }
    }

    public void Update(object? sender, EventArgs e)
    {
        _js.InvokeVoidAsync("scrollToElement", MoveId(Game.ObserverState.CurrentMove));
        if (Game.ObserverState.CurrentMove?.Variation != null)
        {
            InvokeAsync(() => StateHasChanged());
        }

    }

    void DeleteVariation(ItemClickEventArgs e)
    {
        Variation? variation = e.Data as Variation;
        if (variation != null)
        {
            var move = Game.State.Moves.FirstOrDefault(f => f.HalfMoveNumber == variation.StartMove);
            if (move != null && Game.Variations.ContainsKey(move))
            {
                if (Game.Variations[move].Contains(variation))
                {
                    Game.Variations[move].RemoveAll(f => f.RootVariation == variation);
                    Game.Variations[move].Remove(variation);
                }
                else if (variation.RootVariation != null)
                {
                    variation.RootVariation.ChildVariations.Remove(variation);
                }
            }
            if (Game.ObserverState.CurrentMove != null && Game.ObserverState.CurrentMove.Variation == variation)
            {
                Game.ObserverState.CurrentMove.Variation = null;
                Game.ObserverMoveTo(variation.StartMove);
            }
        }
        InvokeAsync(() => StateHasChanged());

    }

    public void Dispose()
    {
        Game.ObserverMoved -= Update;
    }
}
