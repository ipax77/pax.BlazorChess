@using System.Text
@using pax.chess
@inject IJSRuntime _js
@implements IDisposable

<div style="height: 100%; overflow-y: auto; overflow-x: hidden;">
    @if (Game != null)
    {
        <table class="table table-dark table-striped">
            <thead>
                <tr>
                    <th>#</th>
                    @if (Game.State.Info.BlackToMove)
                    {
                        <th><span class="badge bg-light text-black-50">&emsp;white</span></th>
                        <th><span class="badge bg-dark text-while-50"><span class="oi oi-play-circle" style="font-size: 10px;"></span> black</span></th>
                    }
                    else
                    {
                        <th><span class="badge bg-light text-black-50"><span class="oi oi-play-circle" style="font-size: 10px;"></span> white</span></th>
                        <th><span class="badge bg-dark text-while-50">&emsp;black</span></th>
                    }
                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < Game.State.Moves.Count; i += 2)
                {
                    int I = i;
                    Move whitemove = Game.State.Moves[I];
                    Move? blackmove = Game.State.Moves.Count > I + 1 ? Game.State.Moves[I + 1] : null;
                    bool whiteIsCurrent = Game.ObserverState.IsCurrentMove(whitemove);
                    bool blackIsCurrent = Game.ObserverState.IsCurrentMove(blackmove);
                    @if (Game.Variations.ContainsKey(whitemove))
                    {
                        <tr>
                            <td>@(((int)I/2) + 1)</td>
                            <td id="@MoveId(whitemove)" class="pointer @(whiteIsCurrent ? "table-info rounded" : "")" @onclick="e => GotoMove.InvokeAsync(whitemove)">@whitemove.PgnMove</td>
                        </tr>
                        <MovesVariationComponent Variations="Game.Variations[whitemove]" Game="Game" GotoMove="GotoMove"></MovesVariationComponent>
                        @if (blackmove != null)
                        {
                            <tr>
                                <td>@(((int)I/2) + 1)</td>
                                <td>...</td>
                                <td id="@MoveId(blackmove)" class="pointer @(blackIsCurrent ? "table-info" : "")" @onclick="e => GotoMove.InvokeAsync(blackmove)">
                                    @blackmove.PgnMove
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td>@(((int)I/2) + 1)</td>
                            <td id="@MoveId(whitemove)" class="pointer @(whiteIsCurrent ? "table-info rounded" : "")" @onclick="e => GotoMove.InvokeAsync(whitemove)">@whitemove.PgnMove</td>
                            @if (blackmove != null)
                            {
                                <td id="@MoveId(whitemove)" class="pointer @(blackIsCurrent ? "table-info" : "")" @onclick="e => GotoMove.InvokeAsync(blackmove)">
                                    @blackmove.PgnMove
                                </td>
                            }

                        </tr>
                    }
                    @if (blackmove != null && Game.Variations.ContainsKey(blackmove))
                    {
                        <MovesVariationComponent Variations="Game.Variations[blackmove]" Game="Game" GotoMove="GotoMove"></MovesVariationComponent>
                    }
                }
            </tbody>
        </table>
    }
</div>

@code
{
    [CascadingParameter]
    [EditorRequired]
    public Game Game { get; set; } = new Game();

    [Parameter]
    public EventCallback<Move> GotoMove { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Game.ObserverMoved += Update;
    }

    public string MoveId(Move? move)
    {
        if (move == null)
        {
            return "0";
        }
        else
        {
            StringBuilder sb = new StringBuilder();
            sb.Append(move.Variation == null ? "0|0" : $"{move.Variation.StartMove}|{move.Variation.RootStartMove}");
            sb.Append("|");
            sb.Append(move.HalfMoveNumber);
            sb.Append("|");
            sb.Append(Game.Guid.ToString().Substring(0, 5));
            return sb.ToString();
        }
    }

    public void Update(object? sender, EventArgs e)
    {
        _js.InvokeVoidAsync("scrollToElement", MoveId(Game.ObserverState.CurrentMove));
        if (Game.ObserverState.CurrentMove?.Variation != null)
        {
            InvokeAsync(() => StateHasChanged());
        }

    }

    public void Dispose()
    {
        Game.ObserverMoved -= Update;
    }
}
