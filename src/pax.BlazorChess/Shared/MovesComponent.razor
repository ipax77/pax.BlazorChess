@using pax.chess

<div style="height: 100%; overflow: auto">
    @if (Game != null)
    {
        <table class="table table-dark table-striped">
            <thead>
                <tr>
                    <th>#</th>
                    @if (Game.State.Info.BlackToMove)
                    {
                        <th><span class="badge bg-light text-black-50">&emsp;white</span></th>
                        <th><span class="badge bg-dark text-while-50"><span class="oi oi-play-circle" style="font-size: 10px;"></span> black</span></th>
                    }
                    else
                    {
                        <th><span class="badge bg-light text-black-50"><span class="oi oi-play-circle" style="font-size: 10px;"></span> white</span></th>
                        <th><span class="badge bg-dark text-while-50">&emsp;black</span></th>
                    }
                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < Game.State.Moves.Count; i += 2)
                {
                    int I = i;
                    Move whitemove = Game.State.Moves[I];
                    Move? blackmove = Game.State.Moves.Count > I + 1 ? Game.State.Moves[I + 1] : null;
                    bool whiteIsCurrent = Game.ObserverState.IsCurrentMove(whitemove);
                    bool blackIsCurrent = Game.ObserverState.IsCurrentMove(blackmove);
                    @if (Game.Variations.ContainsKey(whitemove))
                    {
                        <tr>
                            <td>@(((int)I/2) + 1)</td>
                            <td class="pointer @(whiteIsCurrent ? "table-info rounded" : "")" @onclick="e => GotoMove.InvokeAsync(whitemove)">@whitemove.PgnMove</td>
                        </tr>
                        <MovesVariationComponent Variations="Game.Variations[whitemove]" Game="Game" GotoMove="GotoMove"></MovesVariationComponent>
                        @if (blackmove != null)
                        {
                            <tr>
                                <td>@(((int)I/2) + 1)</td>
                                <td>...</td>
                                <td class="pointer @(blackIsCurrent ? "table-info" : "")" @onclick="e => GotoMove.InvokeAsync(blackmove)">
                                    @blackmove.PgnMove
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td>@(((int)I/2) + 1)</td>
                            <td class="pointer @(whiteIsCurrent ? "table-info rounded" : "")" @onclick="e => GotoMove.InvokeAsync(whitemove)">@whitemove.PgnMove</td>
                            @if (blackmove != null)
                            {
                                <td class="pointer @(blackIsCurrent ? "table-info" : "")" @onclick="e => GotoMove.InvokeAsync(blackmove)">
                                    @blackmove.PgnMove
                                </td>
                            }

                        </tr>
                    }
                    @if (blackmove != null && Game.Variations.ContainsKey(blackmove))
                    {
                        <MovesVariationComponent Variations="Game.Variations[blackmove]" Game="Game" GotoMove="GotoMove"></MovesVariationComponent>
                    }
                }
            </tbody>
        </table>
    }
</div>

@code
{
    [CascadingParameter]
    public Game? Game { get; set; }

    [Parameter]
    public EventCallback<Move> GotoMove { get; set; }

    public void Update()
    {
        InvokeAsync(() => StateHasChanged());
    }
}
