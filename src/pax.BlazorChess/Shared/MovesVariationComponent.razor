@using BlazorContextMenu
@using pax.chess



@if (RootVariation == null)
{
    @foreach (var variation in Variations.Where(x => x.RootVariation == null))
    {
        <tr>
            <td colspan="3" style="max-width: 15vw; word-wrap: break-word;">
                <ContextMenuTrigger Data="variation" MenuId="variationMenu">
                    <span>
                        @if (variation.Evaluation != null)
                        {
                            <span class="badge bg-info">Eval @variation.Evaluation </span>
                        }
                        <span>[</span>
                        @for (int i = 0; i < variation.Moves.Count; i++)
                        {
                            int I = i;
                            var move = variation.Moves[I];
                            var subVariations = variation.ChildVariations.Where(x => x.RootStartMove == I);
                            bool isCurrent = Game.ObserverState.IsCurrentMove(move);
                            <span class="ms-1 pointer @(isCurrent ? "bg-info" : "")" @onclick="e => GotoMove.InvokeAsync(move)" style="white-space: nowrap;">@move.PgnMove </span>
                            @if (subVariations.Any())
                            {
                                <MovesVariationComponent Variations="subVariations.ToList()" Game="Game" RootVariation="variation" GotoMove="GotoMove"></MovesVariationComponent>
                            }
                        }
                        <span> ]</span>
                    </span>
                </ContextMenuTrigger>
            </td>
        </tr>
    }
}
else
{


    @foreach (var variation in Variations)
    {
        <ContextMenuTrigger Data="variation" MenuId="variationMenu">
        <span class="d-inline">
            (
            @for (int i = 0; i < variation.Moves.Count; i++)
            {
                int I = i;
                var move = variation.Moves[I];
                var subsubVariations = variation.ChildVariations.Where(x => x.RootStartMove == I);
                bool isCurrent = Game.ObserverState.IsCurrentMove(move);
                <span class="ms-1 pointer @(isCurrent ? "bg-info" : "")" @onclick="e => GotoMove.InvokeAsync(move)" style="white-space: nowrap;">@move.PgnMove </span>
                @if (subsubVariations.Any())
                {
                    <MovesVariationComponent Variations="subsubVariations.ToList()" Game="Game" RootVariation="variation" GotoMove="GotoMove"></MovesVariationComponent>
                }
            }
            )
        </span>
        </ContextMenuTrigger>
    }
}

@code {
    [Parameter]
    [EditorRequired]
    public List<Variation> Variations { get; set; } = new List<Variation>();

    [Parameter]
    [EditorRequired]
    public Game Game { get; set; } = new Game();

    [Parameter]
    public Variation? RootVariation { get; set; } = null;

    [Parameter]
    public EventCallback<Move> GotoMove { get; set; }
}
